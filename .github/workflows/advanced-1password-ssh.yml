name: Advanced 1Password SSH Integration

on:
    workflow_dispatch:
        inputs:
            environment:
                description: "Deployment environment"
                required: true
                default: "staging"
                type: choice
                options:
                    - staging
                    - production

env:
    # 1Password vault and item references
    VAULT_NAME: "DevOps"
    SSH_ITEM_NAME: "Production SSH Key"

jobs:
    setup-ssh:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Configure 1Password CLI
              uses: 1password/install-cli-action@v1

            - name: Authenticate with 1Password
              env:
                  OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
              run: |
                  echo "Authenticating with 1Password..."
                  op whoami

            - name: Setup SSH with multiple keys
              env:
                  OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
              run: |
                  # Create SSH directory
                  mkdir -p ~/.ssh
                  chmod 700 ~/.ssh

                  # Method 1: Using item references
                  echo "Retrieving SSH keys from 1Password..."

                  # Get staging SSH key
                  op read "op://${{ env.VAULT_NAME }}/Staging SSH Key/private key" > ~/.ssh/staging_key
                  chmod 600 ~/.ssh/staging_key

                  # Get production SSH key  
                  op read "op://${{ env.VAULT_NAME }}/Production SSH Key/private key" > ~/.ssh/production_key
                  chmod 600 ~/.ssh/production_key

                  # Get SSH config template
                  op read "op://${{ env.VAULT_NAME }}/SSH Config/notesPlain" > ~/.ssh/config
                  chmod 600 ~/.ssh/config

                  # Add known hosts
                  op read "op://${{ env.VAULT_NAME }}/Known Hosts/notesPlain" >> ~/.ssh/known_hosts
                  chmod 644 ~/.ssh/known_hosts

            - name: Verify SSH setup
              run: |
                  echo "SSH keys available:"
                  ls -la ~/.ssh/

                  echo "SSH config:"
                  cat ~/.ssh/config

            - name: Deploy based on environment
              env:
                  DEPLOY_ENV: ${{ github.event.inputs.environment }}
              run: |
                  case $DEPLOY_ENV in
                    staging)
                      echo "Deploying to staging..."
                      ssh -i ~/.ssh/staging_key staging-server "cd /app && ./deploy.sh"
                      ;;
                    production)
                      echo "Deploying to production..."
                      ssh -i ~/.ssh/production_key prod-server "cd /app && ./deploy.sh"
                      ;;
                    *)
                      echo "Unknown environment: $DEPLOY_ENV"
                      exit 1
                      ;;
                  esac

    cleanup:
        runs-on: ubuntu-latest
        needs: setup-ssh
        if: always()

        steps:
            - name: Cleanup SSH keys
              run: |
                  # Remove SSH keys from runner (security best practice)
                  rm -rf ~/.ssh/staging_key ~/.ssh/production_key 2>/dev/null || true
                  echo "SSH keys cleaned up"
