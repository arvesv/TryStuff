name: 1Password SSH experiment

# This workflow demonstrates the minimal setup needed to use SSH keys from 1Password

on:
  workflow_dispatch:

jobs:
  ssh-example:
    runs-on: ubuntu-latest

    environment:
      name: testenv

    steps:
      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v2

      - name: Get stuff from 1Password
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        run: |
          # Sign in to 1Password using the service account and read a test "secret" just to verify
          op read "op://WebDevTest/SSH Key/supersecret"

          # Create SSH directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Get production SSH key  
          op read "op://WebDevTest/ssh_id_ed25519/private key" > ~/.ssh/production_key
          chmod 600 ~/.ssh/production_key

          echo "SSH keys available:"
          ls -la ~/.ssh/

          SSH=$(op read "op://WebDevTest/host/ssh")
          # Extract domain name from SSH connection string and add to known hosts
          DOMAIN=$(echo "$SSH" | sed 's/.*@//' | sed 's/:.*$//')
          ssh-keyscan -H "$DOMAIN" >> ~/.ssh/known_hosts

          ssh $SSH uptime
